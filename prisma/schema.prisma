// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  isInstructor  Boolean      @default(false)
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  accounts      Account[]
  courses       Course[]
  enrollments   Enrollment[]
  progress      Progress[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  price       Float       @default(0)
  isPublished Boolean     @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  instructorId String
  instructor  User         @relation(fields: [instructorId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]

  @@index([instructorId])
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String
  content     String
  order       Int
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id])
  progress    Progress[]

  @@index([courseId])
}

model Enrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Progress {
  id        String   @id @default(cuid())
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}